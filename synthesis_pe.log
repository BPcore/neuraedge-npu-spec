
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.55+112 (git sha1 bf9aaac0f, clang++ 18.1.3 -fPIC -O3)

-- Running command `read_verilog -sv rtl/pe/neuraedge_pe.v; hierarchy -top neuraedge_pe; proc; opt; memory; opt; techmap; opt; stat' --

1. Executing Verilog-2005 frontend: rtl/pe/neuraedge_pe.v
Parsing SystemVerilog input from `rtl/pe/neuraedge_pe.v' to AST representation.
Generating RTLIL representation for module `\neuraedge_pe'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \neuraedge_pe

2.2. Analyzing design hierarchy..
Top module:  \neuraedge_pe
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$rtl/pe/neuraedge_pe.v:41$7 in module neuraedge_pe.
Marked 2 switch rules as full_case in process $proc$rtl/pe/neuraedge_pe.v:33$4 in module neuraedge_pe.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_n in `\neuraedge_pe.$proc$rtl/pe/neuraedge_pe.v:41$7'.

3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\neuraedge_pe.$proc$rtl/pe/neuraedge_pe.v:41$7'.
     1/1: $0\accumulator[31:0]
Creating decoders for process `\neuraedge_pe.$proc$rtl/pe/neuraedge_pe.v:33$4'.
     1/2: $2\mac_result[31:0]
     2/2: $1\mac_result[31:0]

3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\neuraedge_pe.\mac_result' from process `\neuraedge_pe.$proc$rtl/pe/neuraedge_pe.v:33$4'.

3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\neuraedge_pe.\accumulator' using process `\neuraedge_pe.$proc$rtl/pe/neuraedge_pe.v:41$7'.
  created $adff cell `$procdff$22' with positive edge clock and positive level reset.

3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `neuraedge_pe.$proc$rtl/pe/neuraedge_pe.v:41$7'.
Found and cleaned up 2 empty switches in `\neuraedge_pe.$proc$rtl/pe/neuraedge_pe.v:33$4'.
Removing empty process `neuraedge_pe.$proc$rtl/pe/neuraedge_pe.v:33$4'.
Cleaned up 2 empty switches.

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module neuraedge_pe.
<suppressed ~2 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module neuraedge_pe.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\neuraedge_pe'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \neuraedge_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$13.
Removed 1 multiplexer ports.
<suppressed ~2 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \neuraedge_pe.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\neuraedge_pe'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$22 ($adff) from module neuraedge_pe (D = $procmux$16_Y, Q = \accumulator).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \neuraedge_pe..
Removed 2 unused cells and 13 unused wires.
<suppressed ~3 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module neuraedge_pe.
<suppressed ~1 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \neuraedge_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \neuraedge_pe.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\neuraedge_pe'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \neuraedge_pe..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module neuraedge_pe.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Executing MEMORY pass.

5.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

5.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \neuraedge_pe..

5.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \neuraedge_pe..

5.10. Executing MEMORY_COLLECT pass (generating $mem cells).

5.11. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module neuraedge_pe.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\neuraedge_pe'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \neuraedge_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \neuraedge_pe.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\neuraedge_pe'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \neuraedge_pe..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module neuraedge_pe.

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_and.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $adffe.
Using extmapper maccmap for cells of type $macc_v2.
  add { 8'00000000 \data_in } * { 8'00000000 \weight_in } (16x16 bits, unsigned)
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
No more expansions possible.
<suppressed ~744 debug messages>

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module neuraedge_pe.
<suppressed ~1143 debug messages>

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\neuraedge_pe'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \neuraedge_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \neuraedge_pe.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\neuraedge_pe'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \neuraedge_pe..
Removed 58 unused cells and 282 unused wires.
<suppressed ~59 debug messages>

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module neuraedge_pe.

8.9. Rerunning OPT passes. (Maybe there is more to do..)

8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \neuraedge_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \neuraedge_pe.
Performed a total of 0 changes.

8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\neuraedge_pe'.
Removed a total of 0 cells.

8.13. Executing OPT_DFF pass (perform DFF optimizations).

8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \neuraedge_pe..

8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module neuraedge_pe.

8.16. Finished OPT passes. (There is nothing left to do.)

9. Printing statistics.

=== neuraedge_pe ===

   Number of wires:                188
   Number of wire bits:           1230
   Number of public wires:          17
   Number of public wire bits:     184
   Number of ports:                 13
   Number of port bits:             72
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                723
     $_AND_                        311
     $_DFFE_PN0P_                   32
     $_MUX_                         80
     $_OR_                         101
     $_XOR_                        199

End of script. Logfile hash: ff56a030a5, CPU: user 0.16s system 0.01s, MEM: 20.05 MB peak
Yosys 0.55+112 (git sha1 bf9aaac0f, clang++ 18.1.3 -fPIC -O3)
Time spent: 28% 1x techmap (0 sec), 24% 13x opt_expr (0 sec), ...
