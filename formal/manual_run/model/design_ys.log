
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.55+112 (git sha1 bf9aaac0f, clang++ 18.1.3 -fPIC -O3)

-- Running command `read_verilog -sv router_mesh_stub.v router_cell.v fifo.v router_mesh_deadlock_3x3.sv; proc; opt; synth -top __top__; hierarchy -smtcheck; rename -witness; write_rtlil ../model/design.il' --

1. Executing Verilog-2005 frontend: router_mesh_stub.v
Parsing SystemVerilog input from `router_mesh_stub.v' to AST representation.
Generating RTLIL representation for module `\router_mesh'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: router_cell.v
Parsing SystemVerilog input from `router_cell.v' to AST representation.
Generating RTLIL representation for module `\router_cell'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: fifo.v
Parsing SystemVerilog input from `fifo.v' to AST representation.
Generating RTLIL representation for module `\fifo'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: router_mesh_deadlock_3x3.sv
Parsing SystemVerilog input from `router_mesh_deadlock_3x3.sv' to AST representation.
Generating RTLIL representation for module `\__top__'.
[FORMAL] harness alive
Successfully finished Verilog frontend.

5. Executing PROC pass (convert processes to netlists).

5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$fifo.v:29$6 in module fifo.
Removed a total of 0 dead cases.

5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 5 assignments to connections.

5.4. Executing PROC_INIT pass (extract init attributes).

5.5. Executing PROC_ARST pass (detect async resets in processes).

5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~5 debug messages>

5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\__top__.$proc$router_mesh_deadlock_3x3.sv:0$26'.
Creating decoders for process `\__top__.$proc$router_mesh_deadlock_3x3.sv:17$25'.
Creating decoders for process `\fifo.$proc$fifo.v:29$6'.
     1/9: $2$memwr$\mem$fifo.v:37$2_EN[63:0]$17
     2/9: $2$memwr$\mem$fifo.v:37$2_DATA[63:0]$16
     3/9: $2$memwr$\mem$fifo.v:37$2_ADDR[1:0]$15
     4/9: $1$memwr$\mem$fifo.v:37$2_EN[63:0]$13
     5/9: $1$memwr$\mem$fifo.v:37$2_DATA[63:0]$12
     6/9: $1$memwr$\mem$fifo.v:37$2_ADDR[1:0]$11
     7/9: $0\count[2:0]
     8/9: $0\rd_ptr[1:0]
     9/9: $0\wr_ptr[1:0]

5.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\__top__.\rst_n' from process `\__top__.$proc$router_mesh_deadlock_3x3.sv:17$25'.

5.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fifo.\wr_ptr' using process `\fifo.$proc$fifo.v:29$6'.
  created $dff cell `$procdff$80' with positive edge clock.
Creating register for signal `\fifo.\rd_ptr' using process `\fifo.$proc$fifo.v:29$6'.
  created $dff cell `$procdff$81' with positive edge clock.
Creating register for signal `\fifo.\count' using process `\fifo.$proc$fifo.v:29$6'.
  created $dff cell `$procdff$82' with positive edge clock.
Creating register for signal `\fifo.$memwr$\mem$fifo.v:37$2_ADDR' using process `\fifo.$proc$fifo.v:29$6'.
  created $dff cell `$procdff$83' with positive edge clock.
Creating register for signal `\fifo.$memwr$\mem$fifo.v:37$2_DATA' using process `\fifo.$proc$fifo.v:29$6'.
  created $dff cell `$procdff$84' with positive edge clock.
Creating register for signal `\fifo.$memwr$\mem$fifo.v:37$2_EN' using process `\fifo.$proc$fifo.v:29$6'.
  created $dff cell `$procdff$85' with positive edge clock.

5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `__top__.$proc$router_mesh_deadlock_3x3.sv:0$26'.
Removing empty process `__top__.$proc$router_mesh_deadlock_3x3.sv:17$25'.
Found and cleaned up 5 empty switches in `\fifo.$proc$fifo.v:29$6'.
Removing empty process `fifo.$proc$fifo.v:29$6'.
Cleaned up 5 empty switches.

5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.
Optimizing module fifo.
<suppressed ~9 debug messages>
Optimizing module router_cell.
Optimizing module router_mesh.

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.
Optimizing module fifo.
Optimizing module router_cell.
Optimizing module router_mesh.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\router_cell'.
Finding identical cells in module `\router_mesh'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \__top__..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$44.
    dead port 2/2 on $mux $procmux$38.
    dead port 2/2 on $mux $procmux$32.
Running muxtree optimizer on module \router_cell..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \router_mesh..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 3 multiplexer ports.
<suppressed ~6 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \__top__.
  Optimizing cells in module \fifo.
    Consolidated identical input bits for $mux cell $procmux$29:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B=64'1111111111111111111111111111111111111111111111111111111111111111, Y=$procmux$29_Y
      New ports: A=1'0, B=1'1, Y=$procmux$29_Y [0]
      New connections: $procmux$29_Y [63:1] = { $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] $procmux$29_Y [0] }
  Optimizing cells in module \fifo.
    Consolidated identical input bits for $mux cell $procmux$47:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B=$2$memwr$\mem$fifo.v:37$2_EN[63:0]$17, Y=$procmux$47_Y
      New ports: A=1'0, B=$procmux$29_Y [0], Y=$procmux$47_Y [0]
      New connections: $procmux$47_Y [63:1] = { $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] }
  Optimizing cells in module \fifo.
  Optimizing cells in module \router_cell.
  Optimizing cells in module \router_mesh.
Performed a total of 2 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\router_cell'.
Finding identical cells in module `\router_mesh'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$80 ($dff) from module fifo (D = $procmux$75_Y, Q = \wr_ptr, rval = 2'00).
Adding EN signal on $auto$ff.cc:266:slice$87 ($sdff) from module fifo (D = $procmux$73_Y, Q = \wr_ptr).
Adding SRST signal on $procdff$81 ($dff) from module fifo (D = $procmux$66_Y, Q = \rd_ptr, rval = 2'00).
Adding EN signal on $auto$ff.cc:266:slice$89 ($sdff) from module fifo (D = $procmux$64_Y, Q = \rd_ptr).
Adding SRST signal on $procdff$82 ($dff) from module fifo (D = $procmux$58_Y, Q = \count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$91 ($sdff) from module fifo (D = $procmux$58_Y, Q = \count).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \router_cell..
Finding unused cells or wires in module \router_mesh..
Removed 18 unused cells and 49 unused wires.
<suppressed ~22 debug messages>

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.
Optimizing module fifo.
<suppressed ~1 debug messages>
Optimizing module router_cell.
Optimizing module router_mesh.

6.9. Rerunning OPT passes. (Maybe there is more to do..)

6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \__top__..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \router_cell..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \router_mesh..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \__top__.
  Optimizing cells in module \fifo.
  Optimizing cells in module \router_cell.
  Optimizing cells in module \router_mesh.
Performed a total of 0 changes.

6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\router_cell'.
Finding identical cells in module `\router_mesh'.
Removed a total of 0 cells.

6.13. Executing OPT_DFF pass (perform DFF optimizations).

6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \router_cell..
Finding unused cells or wires in module \router_mesh..

6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.
Optimizing module fifo.
Optimizing module router_cell.
Optimizing module router_mesh.

6.16. Finished OPT passes. (There is nothing left to do.)

7. Executing SYNTH pass.

7.1. Executing HIERARCHY pass (managing design hierarchy).

7.1.1. Analyzing design hierarchy..
Top module:  \__top__

7.1.2. Analyzing design hierarchy..
Top module:  \__top__
Removing unused module `\fifo'.
Removing unused module `\router_cell'.
Removing unused module `\router_mesh'.
Removed 3 unused modules.
Module __top__ directly or indirectly displays text -> setting "keep" attribute.

7.2. Executing PROC pass (convert processes to netlists).

7.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

7.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

7.2.4. Executing PROC_INIT pass (extract init attributes).

7.2.5. Executing PROC_ARST pass (detect async resets in processes).

7.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

7.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

7.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

7.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

7.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

7.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.5. Executing CHECK pass (checking for obvious problems).
Checking module __top__...
Found and reported 0 problems.

7.6. Executing OPT pass (performing simple optimizations).

7.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Removed a total of 0 cells.

7.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \__top__..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \__top__.
Performed a total of 0 changes.

7.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Removed a total of 0 cells.

7.6.6. Executing OPT_DFF pass (perform DFF optimizations).

7.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.6.9. Finished OPT passes. (There is nothing left to do.)

7.7. Executing FSM pass (extract and optimize FSM).

7.7.1. Executing FSM_DETECT pass (finding FSMs in design).

7.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

7.8. Executing OPT pass (performing simple optimizations).

7.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Removed a total of 0 cells.

7.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \__top__..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \__top__.
Performed a total of 0 changes.

7.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Removed a total of 0 cells.

7.8.6. Executing OPT_DFF pass (perform DFF optimizations).

7.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.8.9. Finished OPT passes. (There is nothing left to do.)

7.9. Executing WREDUCE pass (reducing word size of cells).

7.10. Executing PEEPOPT pass (run peephole optimizers).

7.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module __top__:
  created 0 $alu and 0 $macc cells.

7.13. Executing SHARE pass (SAT-based resource sharing).

7.14. Executing OPT pass (performing simple optimizations).

7.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Removed a total of 0 cells.

7.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \__top__..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \__top__.
Performed a total of 0 changes.

7.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Removed a total of 0 cells.

7.14.6. Executing OPT_DFF pass (perform DFF optimizations).

7.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.14.9. Finished OPT passes. (There is nothing left to do.)

7.15. Executing MEMORY pass.

7.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

7.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.17. Executing OPT pass (performing simple optimizations).

7.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Removed a total of 0 cells.

7.17.3. Executing OPT_DFF pass (perform DFF optimizations).

7.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.17.5. Finished fast OPT passes.

7.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

7.19. Executing OPT pass (performing simple optimizations).

7.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Removed a total of 0 cells.

7.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \__top__..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \__top__.
Performed a total of 0 changes.

7.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Removed a total of 0 cells.

7.19.6. Executing OPT_SHARE pass.

7.19.7. Executing OPT_DFF pass (perform DFF optimizations).

7.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.19.10. Finished OPT passes. (There is nothing left to do.)

7.20. Executing TECHMAP pass (map to technology primitives).

7.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.20.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~75 debug messages>

7.21. Executing OPT pass (performing simple optimizations).

7.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Removed a total of 0 cells.

7.21.3. Executing OPT_DFF pass (perform DFF optimizations).

7.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.21.5. Finished fast OPT passes.

7.22. Executing ABC pass (technology mapping using ABC).

7.22.1. Extracting gate netlist of module `\__top__' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

7.23. Executing OPT pass (performing simple optimizations).

7.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module __top__.

7.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\__top__'.
Removed a total of 0 cells.

7.23.3. Executing OPT_DFF pass (perform DFF optimizations).

7.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \__top__..

7.23.5. Finished fast OPT passes.

7.24. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `__top__'. Setting top module to __top__.

7.24.1. Analyzing design hierarchy..
Top module:  \__top__

7.24.2. Analyzing design hierarchy..
Top module:  \__top__
Removed 0 unused modules.
Module __top__ directly or indirectly displays text -> setting "keep" attribute.

7.25. Printing statistics.

=== __top__ ===

   Number of wires:                  1
   Number of wire bits:              1
   Number of public wires:           1
   Number of public wire bits:       1
   Number of ports:                  0
   Number of port bits:              0
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $print                          1

7.26. Executing CHECK pass (checking for obvious problems).
Checking module __top__...
Found and reported 0 problems.

8. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `__top__'. Setting top module to __top__.

8.1. Analyzing design hierarchy..
Top module:  \__top__

8.2. Analyzing design hierarchy..
Top module:  \__top__
Removed 0 unused modules.
Module __top__ directly or indirectly displays text -> setting "keep" attribute.

9. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: 146b6676b6, CPU: user 0.07s system 0.01s, MEM: 16.53 MB peak
Yosys 0.55+112 (git sha1 bf9aaac0f, clang++ 18.1.3 -fPIC -O3)
Time spent: 26% 17x opt_expr (0 sec), 22% 6x read_verilog (0 sec), ...
