
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.55+112 (git sha1 bf9aaac0f, clang++ 18.1.3 -fPIC -O3)

-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: noc_router.v
Parsing SystemVerilog input from `noc_router.v' to AST representation.
Generating RTLIL representation for module `\noc_router'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: noc_router_props.sv
Parsing SystemVerilog input from `noc_router_props.sv' to AST representation.
Generating RTLIL representation for module `\noc_router_props'.
Successfully finished Verilog frontend.

3. Executing PREP pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \noc_router

3.1.2. Analyzing design hierarchy..
Top module:  \noc_router
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 16 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\noc_router.$proc$noc_router.v:0$3'.

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\noc_router.\ready_out' from process `\noc_router.$proc$noc_router.v:0$3'.
No latch inferred for signal `\noc_router.\flit_out' from process `\noc_router.$proc$noc_router.v:0$3'.
No latch inferred for signal `\noc_router.\valid_out' from process `\noc_router.$proc$noc_router.v:0$3'.
No latch inferred for signal `\noc_router.$fordecl_block$1.i' from process `\noc_router.$proc$noc_router.v:0$3'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `noc_router.$proc$noc_router.v:0$3'.
Cleaned up 0 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

3.3. Executing FUTURE pass.

3.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

3.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc_router..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

3.6. Executing CHECK pass (checking for obvious problems).
Checking module noc_router...
Found and reported 0 problems.

3.7. Executing OPT pass (performing simple optimizations).

3.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

3.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc_router'.
Removed a total of 0 cells.

3.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \noc_router..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \noc_router.
Performed a total of 0 changes.

3.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc_router'.
Removed a total of 0 cells.

3.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc_router..

3.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

3.7.8. Finished OPT passes. (There is nothing left to do.)

3.8. Executing WREDUCE pass (reducing word size of cells).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc_router..

3.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc_router'.
Removed a total of 0 cells.

3.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc_router..

3.11.4. Finished fast OPT passes.

3.12. Printing statistics.

=== noc_router ===

   Number of wires:                  8
   Number of wire bits:            662
   Number of public wires:           8
   Number of public wire bits:     662
   Number of ports:                  8
   Number of port bits:            662
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

3.13. Executing CHECK pass (checking for obvious problems).
Checking module noc_router...
Found and reported 0 problems.

4. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `noc_router'. Setting top module to noc_router.

4.1. Analyzing design hierarchy..
Top module:  \noc_router

4.2. Analyzing design hierarchy..
Top module:  \noc_router
Removed 0 unused modules.

5. Executing jny backend.

6. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: c2900c7bd6, CPU: user 0.01s system 0.01s, MEM: 16.76 MB peak
Yosys 0.55+112 (git sha1 bf9aaac0f, clang++ 18.1.3 -fPIC -O3)
Time spent: 31% 4x opt_clean (0 sec), 26% 5x opt_expr (0 sec), ...
