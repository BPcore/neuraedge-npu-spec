# NeuraEdge NPU - Phase 4 Synthesis & Physical Implementation CI/CD
# Comprehensive validation pipeline for manufacturing readiness
# Generated: August 14, 2025

name: "Phase 4 Synthesis & Physical Implementation"

on:
  push:
    branches: [ feat/week4-system-assembly, main ]
    paths:
      - 'phase4_week*/**'
      - 'week4_floorplan_power/**'
      - 'week5/**'
      - 'build/**'
      - 'scripts/synth_*.tcl'
      - 'constraints/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'phase4_week*/**'
      - 'week4_floorplan_power/**'

env:
  TECHNOLOGY: "TSMC_65nm_GP"
  DESIGN: "neuraedge_npu"
  DIE_SIZE: "2.6mm_x_2.6mm"
  # NOTE: Mesh experiments (long-running verification sweeps) are opt-in.
  # To enable nightly mesh experiments set RUN_MESH_EXPERIMENTS=1 in the workflow env
  # or flip this default in a follow-up PR. Keeping them opt-in prevents long CI runs.

jobs:
  phase4_validation:
    name: "Phase 4 Implementation Validation"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Environment
      run: |
        echo "Setting up NeuraEdge NPU Phase 4 validation environment"
        echo "Technology: ${{ env.TECHNOLOGY }}"
        echo "Design: ${{ env.DESIGN }}"
        echo "Die Size: ${{ env.DIE_SIZE }}"
        
    - name: Validate Phase 4 Week 1 - Synthesis
      run: |
        echo "=== Phase 4 Week 1: RTL Synthesis Validation ==="
        if [ -d "phase4_week1" ]; then
          echo "‚úÖ Week 1 synthesis implementation found"
          find phase4_week1 -name "*.v" -o -name "*.sv" -o -name "*.tcl" | wc -l
        else
          echo "‚ùå Week 1 synthesis implementation missing"
          exit 1
        fi
        
    - name: Validate Phase 4 Week 2 - Timing Analysis
      run: |
        echo "=== Phase 4 Week 2: Static Timing Analysis Validation ==="
        if [ -d "phase4_week2" ]; then
          echo "‚úÖ Week 2 timing analysis found"
          find phase4_week2 -name "*.sdc" -o -name "*timing*" | wc -l
        else
          echo "‚ùå Week 2 timing analysis missing"
          exit 1
        fi
        
    - name: Validate Phase 4 Week 3 - Physical Verification
      run: |
        echo "=== Phase 4 Week 3: Physical Verification Validation ==="
        if [ -d "phase4_week3" ]; then
          echo "‚úÖ Week 3 physical verification found"
          find phase4_week3 -name "*drc*" -o -name "*lvs*" -o -name "*erc*" | wc -l
        else
          echo "‚ùå Week 3 physical verification missing"
          exit 1
        fi
        
    - name: Validate Phase 4 Week 4 - Floorplanning
      run: |
        echo "=== Phase 4 Week 4: Floorplanning & Power-Grid Validation ==="
        if [ -d "week4_floorplan_power" ]; then
          echo "‚úÖ Week 4 floorplanning implementation found"
          find week4_floorplan_power -name "*.def" -o -name "*.lef" -o -name "*.upf" | wc -l
        else
          echo "‚ùå Week 4 floorplanning implementation missing"
          exit 1
        fi
        
    - name: Validate Manufacturing Deliverables
      run: |
        echo "=== Manufacturing Deliverables Validation ==="
        deliverables_found=0
        
        # Check frozen floorplan
        if [ -f "week4_floorplan_power/day5_freeze_handoff/neuraedge_npu_floorplan_freeze.def" ]; then
          echo "‚úÖ Frozen floorplan DEF found"
          deliverables_found=$((deliverables_found + 1))
        fi
        
        # Check LEF library
        if [ -f "week4_floorplan_power/day5_freeze_handoff/neuraedge_npu.lef" ]; then
          echo "‚úÖ LEF library found"
          deliverables_found=$((deliverables_found + 1))
        fi
        
        # Check UPF power intent
        if [ -f "week4_floorplan_power/day5_freeze_handoff/neuraedge_npu_power.upf" ]; then
          echo "‚úÖ UPF power intent found"
          deliverables_found=$((deliverables_found + 1))
        fi
        
        # Check SDC timing constraints
        if [ -f "week4_floorplan_power/day5_freeze_handoff/neuraedge_npu_timing.sdc" ]; then
          echo "‚úÖ SDC timing constraints found"
          deliverables_found=$((deliverables_found + 1))
        fi
        
        echo "Manufacturing deliverables found: $deliverables_found/4"
        if [ $deliverables_found -eq 4 ]; then
          echo "üéâ All manufacturing deliverables validated!"
        else
          echo "‚ùå Missing manufacturing deliverables"
          exit 1
        fi
        
    - name: Generate Phase 4 Report
      run: |
        echo "=== Phase 4 Implementation Report ==="
        echo "Generated: $(date)"
        echo ""
        echo "Phase 4 Weeks Implemented:"
        [ -d "phase4_week1" ] && echo "‚úÖ Week 1: RTL Synthesis" || echo "‚ùå Week 1: Missing"
        [ -d "phase4_week2" ] && echo "‚úÖ Week 2: Static Timing Analysis" || echo "‚ùå Week 2: Missing"  
        [ -d "phase4_week3" ] && echo "‚úÖ Week 3: Physical Verification" || echo "‚ùå Week 3: Missing"
        [ -d "week4_floorplan_power" ] && echo "‚úÖ Week 4: Floorplanning & Power-Grid" || echo "‚ùå Week 4: Missing"
        [ -d "week5" ] && echo "üìã Week 5: Place & Route (Ready)" || echo "üìã Week 5: Not started"
        echo ""
        echo "File Count Summary:"
        echo "RTL files: $(find . -name "*.v" -o -name "*.sv" | wc -l)"
        echo "Script files: $(find . -name "*.tcl" -o -name "*.sh" | wc -l)" 
        echo "Constraint files: $(find . -name "*.sdc" -o -name "*.upf" | wc -l)"
        echo "Documentation: $(find . -name "*.md" | wc -l)"
        echo ""
        echo "üè≠ Manufacturing Status: READY FOR P&R"
        
  quality_gate:
    name: "Quality Gate Assessment"
    runs-on: ubuntu-latest
    needs: phase4_validation
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Assess Design Quality
      run: |
        echo "=== NeuraEdge NPU Quality Gate Assessment ==="
        quality_score=0
        
        # Check synthesis completeness
        if [ -d "phase4_week1" ] && [ -f "phase4_week1/synthesis_summary.md" ]; then
          echo "‚úÖ Synthesis Quality: PASS"
          quality_score=$((quality_score + 25))
        fi
        
        # Check timing analysis
        if [ -d "phase4_week2" ] && [ -f "phase4_week2/timing_analysis_summary.md" ]; then
          echo "‚úÖ Timing Quality: PASS"
          quality_score=$((quality_score + 25))
        fi
        
        # Check physical verification
        if [ -d "phase4_week3" ] && [ -f "phase4_week3/physical_verification_summary.md" ]; then
          echo "‚úÖ Physical Verification Quality: PASS"
          quality_score=$((quality_score + 25))
        fi
        
        # Check floorplan freeze
        if [ -f "week4_floorplan_power/day5_freeze_handoff/neuraedge_npu_floorplan_freeze.def" ]; then
          echo "‚úÖ Manufacturing Readiness: PASS"
          quality_score=$((quality_score + 25))
        fi
        
        echo ""
        echo "Overall Quality Score: $quality_score/100"
        
        if [ $quality_score -eq 100 ]; then
          echo "üéâ QUALITY GATE: PASSED"
          echo "Status: APPROVED FOR TAPEOUT PREPARATION"
        elif [ $quality_score -ge 75 ]; then
          echo "‚ö†Ô∏è QUALITY GATE: CONDITIONAL PASS"
          echo "Status: REQUIRES MINOR FIXES"
        else
          echo "‚ùå QUALITY GATE: FAILED"
          echo "Status: REQUIRES MAJOR REWORK"
          exit 1
        fi
