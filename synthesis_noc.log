
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.55+112 (git sha1 bf9aaac0f, clang++ 18.1.3 -fPIC -O3)

-- Running command `read_verilog -sv rtl/noc/noc_router.v; hierarchy -top noc_router; proc; opt; memory; opt; techmap; opt; stat' --

1. Executing Verilog-2005 frontend: rtl/noc/noc_router.v
Parsing SystemVerilog input from `rtl/noc/noc_router.v' to AST representation.
Generating RTLIL representation for module `\noc_router'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \noc_router

2.2. Analyzing design hierarchy..
Top module:  \noc_router
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 16 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\noc_router.$proc$rtl/noc/noc_router.v:0$3'.

3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\noc_router.\ready_out' from process `\noc_router.$proc$rtl/noc/noc_router.v:0$3'.
No latch inferred for signal `\noc_router.\flit_out' from process `\noc_router.$proc$rtl/noc/noc_router.v:0$3'.
No latch inferred for signal `\noc_router.\valid_out' from process `\noc_router.$proc$rtl/noc/noc_router.v:0$3'.
No latch inferred for signal `\noc_router.$fordecl_block$1.i' from process `\noc_router.$proc$rtl/noc/noc_router.v:0$3'.

3.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `noc_router.$proc$rtl/noc/noc_router.v:0$3'.
Cleaned up 0 empty switches.

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc_router'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \noc_router..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \noc_router.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc_router'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc_router..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \noc_router..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \noc_router.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc_router'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc_router..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Executing MEMORY pass.

5.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

5.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc_router..

5.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc_router..

5.10. Executing MEMORY_COLLECT pass (generating $mem cells).

5.11. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc_router'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \noc_router..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \noc_router.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc_router'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc_router..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~75 debug messages>

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc_router'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \noc_router..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \noc_router.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc_router'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc_router..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_router.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Printing statistics.

=== noc_router ===

   Number of wires:                  8
   Number of wire bits:            662
   Number of public wires:           8
   Number of public wire bits:     662
   Number of ports:                  8
   Number of port bits:            662
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

End of script. Logfile hash: d3178e948c, CPU: user 0.04s system 0.00s, MEM: 14.85 MB peak
Yosys 0.55+112 (git sha1 bf9aaac0f, clang++ 18.1.3 -fPIC -O3)
Time spent: 34% 3x read_verilog (0 sec), 20% 8x opt_expr (0 sec), ...
